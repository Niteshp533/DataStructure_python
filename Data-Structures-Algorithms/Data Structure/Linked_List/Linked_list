class Node:
     def __init__(self,value):
        self.data = value
        self.next = None
    
class LinkedList:
    def __init__(self):
        self.head = None
        self.n = 0
        
    def  __len__(self):
        return self.n
    
    def insert_head(self, value):
        new_node = Node(value)
        new_node.next = self.head
        self.head = new_node
        self.n = self.n + 1
    
    def traverse(self):
        curr = self.head
        while curr != None:
            print(curr.data)
            curr = curr.next
            
    def __str__(self):
        result = ""
        curr = self.head
        while curr != None:
            result = result + str(curr.data) +" -> " 
            curr = curr.next
        return result[:-3]
    
    def append(self,value):
        new_node = Node(value)
        if self.head == None:
            self.head = new_node
            self.n = self.n + 1
            return
        curr = self.head
        while curr.next != None:
            curr = curr.next
        curr.next = new_node
        self.n = self.n + 1
        
    def insert_after(self, after, value):
        new_node = Node(value)
        curr = self.head
        while curr != None:
            if curr.data == after:
                break
            curr = curr.next
        if curr != None:
            new_node.next = curr.next
            curr.next = new_node
            self.n = self.n + 1
        else:
            return "Item not found!"
        
    def clear(self):
        self.head = None
        self.n = 0
        
    def del_head(self):
        if self.head == None:
            return 'Empty Linked List'
        self.head = self.head.next
        self.n = self.n - 1
        
    def pop(self):
        if self.head == None:
            return 'Empty Linked List'
        curr = self.head
        if curr.next == None:
            return self.del_head()
        while curr.next.next != None:
            curr = curr.next
        curr.next = None
        self.n = self.n - 1
        return curr.next
    
    def remove(self,value):
        if self.head == None:
            return 'Empty Linked List'
        curr = self.head
        if curr.data == value:
                return self.del_head()
        while curr.next != None:
            if curr.next.data == value:
                break
            curr = curr.next
        if curr.next == None:
             return 'Item is not found!'
        else:
            curr.next = curr.next.next
            self.n = self.n - 1
            
    def fin(self,value):
        if self.head == None:
            return 'Empty Linked List!'
        curr = self.head
        count = 0
        if curr.data == value:
                return count
        while curr.next != None:          
            if curr.next.data == value:
                return count
            curr = curr.next
            count+=1
        return 'Item is not found!' 
    
    def del_index(self,pos):
        curr = self.head
        if curr == None:
            return 'Empty LinkedList!'
        count = 0
        
        while curr != None:          
            if count == pos:
                self.n = self.n - 1
                return self.remove(curr.data)
            count += 1
            curr = curr.next
            self.n = self.n -1
        return 'IndexError : Index is not found! (Index-limit exceed!)'
    
    def __getitem__(self, index):
        
        curr = self.head
        count = 0
        while curr != None:
            if count == index:
                return curr.data
            curr = curr.next
            count = count +1
        return 'IndexError : Index is not found!'
    